controller:
  replicaCount: 3
  nodeSelector:
    kubernetes.io/os: linux
    workloadType: user # b/c omsagent hogs system node
  topologySpreadConstraints:
  - maxSkew: 2
    topologyKey: "kubernetes.io/hostname" # spread evenly across nodes
    whenUnsatisfiable: DoNotSchedule # or ScheduleAnyway
    labelSelector:
      matchLabels:
        app: ingress
  podLabels:
    aadpodidbinding: ${INGRESS_MI_NAME}
    app: ingress
  service:
    annotations:
      service.beta.kubernetes.io/azure-load-balancer-resource-group: ${AKS_RG_NAME}
    loadBalancerIP: ${INGRESS_PUBLIC_IP}
  extraArgs:
    default-ssl-certificate: "ingress/ingress-tls-${AKS_ENV_NAME}-wildcard"
  extraVolumes:
      - name: cluster-kv-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "cluster-kv"
      - name: ingress-tls-${AKS_ENV_NAME}
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "ingress-tls-${AKS_ENV_NAME}"
      - name: ingress-tls-${AKS_ENV_NAME}-wildcard
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "ingress-tls-${AKS_ENV_NAME}-wildcard"
  extraVolumeMounts:
      - name: cluster-kv-inline
        mountPath: "/mnt/cluster-kv"
        readOnly: true
      - name: ingress-tls-${AKS_ENV_NAME}
        mountPath: "/mnt/ingress-tls-${AKS_ENV_NAME}"
        readOnly: true
      - name: ingress-tls-${AKS_ENV_NAME}-wildcard
        mountPath: "/mnt/ingress-tls-wildcard"
        readOnly: true
defaultBackend:
  nodeSelector:
    kubernetes.io/os: linux
    workloadType: user # b/c omsagent hogs system node
